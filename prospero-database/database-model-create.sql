-- MySQL Script generated by MySQL Workbench
-- Wed Mar 22 11:09:08 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema InvoiceDB
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema InvoiceDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `InvoiceDB` DEFAULT CHARACTER SET utf8 ;
-- -----------------------------------------------------
-- Schema ReferenceDB
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema ReferenceDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ReferenceDB` ;
-- -----------------------------------------------------
-- Schema ChargingDB
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema ChargingDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ChargingDB` ;
-- -----------------------------------------------------
-- Schema AllSpark
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema AllSpark
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `AllSpark` ;
-- -----------------------------------------------------
-- Schema RatedEventsDB
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema RatedEventsDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `RatedEventsDB` ;
-- -----------------------------------------------------
-- Schema RatingDB
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema RatingDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `RatingDB` ;
-- -----------------------------------------------------
-- Schema ImportedEventsDB
-- -----------------------------------------------------
-- Schema to handle file processing and stored event generated due to it

-- -----------------------------------------------------
-- Schema ImportedEventsDB
--
-- Schema to handle file processing and stored event generated due to it
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ImportedEventsDB` ;
USE `InvoiceDB` ;

-- -----------------------------------------------------
-- Table `InvoiceDB`.`InvoiceBatchSummary`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `InvoiceDB`.`InvoiceBatchSummary` ;

CREATE TABLE IF NOT EXISTS `InvoiceDB`.`InvoiceBatchSummary` (
  `InvoiceBatchNumber` BIGINT NOT NULL AUTO_INCREMENT,
  `InvoiceBatchDescription` VARCHAR(25) NOT NULL,
  `InvoiceBatchUser` VARCHAR(25) NOT NULL,
  `InvoiceBatchGenerationDate` DATETIME NOT NULL,
  `InvoiceDisplayDate` DATE NOT NULL,
  `NumberOfAccountsSubmitted` INT NOT NULL,
  `NumberOfAccountsRejected` INT NOT NULL,
  `NumberOfAccountsAccepted` INT NOT NULL,
  `NumberOfAccountsNotDueAnInvoice` INT NOT NULL,
  `NumberOfAccountsSuppressed` INT NOT NULL,
  `NumberOfInvoicesGenerated` INT NOT NULL,
  `NumberOfInvoicesRolledBack` INT NOT NULL,
  `NumberOfInvoicesRegenerated` INT NOT NULL,
  PRIMARY KEY (`InvoiceBatchNumber`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ReferenceDB`.`PaymentType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ReferenceDB`.`PaymentType` ;

CREATE TABLE IF NOT EXISTS `ReferenceDB`.`PaymentType` (
  `PaymentTypeID` SMALLINT NOT NULL,
  `PaymentTypeCode` VARCHAR(40) NOT NULL,
  `PaymentTypeDescription` VARCHAR(200) NULL,
  PRIMARY KEY (`PaymentTypeID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ReferenceDB`.`BillType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ReferenceDB`.`BillType` ;

CREATE TABLE IF NOT EXISTS `ReferenceDB`.`BillType` (
  `BillTypeID` SMALLINT NOT NULL,
  `BillTypeCode` VARCHAR(40) NOT NULL,
  `BillTypeDescription` VARCHAR(200) NULL,
  PRIMARY KEY (`BillTypeID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ReferenceDB`.`InvoiceLayoutType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ReferenceDB`.`InvoiceLayoutType` ;

CREATE TABLE IF NOT EXISTS `ReferenceDB`.`InvoiceLayoutType` (
  `InvoiceLayoutTypeID` SMALLINT NOT NULL,
  `InvoiceLayoutTypeCode` VARCHAR(40) NOT NULL,
  `InvoiceLayoutTypeDescription` VARCHAR(200) NOT NULL,
  PRIMARY KEY (`InvoiceLayoutTypeID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ReferenceDB`.`InvoiceType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ReferenceDB`.`InvoiceType` ;

CREATE TABLE IF NOT EXISTS `ReferenceDB`.`InvoiceType` (
  `InvoiceTypeID` SMALLINT NOT NULL,
  `InvoiceTypeCode` VARCHAR(40) NOT NULL,
  `InvoiceTypeDescription` VARCHAR(200) NULL,
  `Initiation` TINYINT(1) NOT NULL,
  `Events` TINYINT(1) NOT NULL,
  `Charges` TINYINT(1) NOT NULL,
  PRIMARY KEY (`InvoiceTypeID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ReferenceDB`.`InvoicingCompany`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ReferenceDB`.`InvoicingCompany` ;

CREATE TABLE IF NOT EXISTS `ReferenceDB`.`InvoicingCompany` (
  `InvoicingCompanyID` SMALLINT NOT NULL,
  `InvoicingCompanyName` VARCHAR(75) NOT NULL,
  `InvoicingCompanyDisplayName` VARCHAR(75) NOT NULL,
  `InvoicingCompanyNumber` VARCHAR(25) NOT NULL,
  `InvoicingCompanyVATCode` VARCHAR(25) NOT NULL,
  `InvoicingCompanyStatusFlag` TINYINT(1) NOT NULL,
  `InvoicingCompanyAddressID` BIGINT NOT NULL,
  `InvoicingCompanyPhoneNumber` VARCHAR(15) NOT NULL,
  `InvoicingCompanyEmailAddress` VARCHAR(30) NOT NULL,
  `InvoicingCompanyWebsite` VARCHAR(30) NOT NULL,
  `InvoicingCompanyLogoFile` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`InvoicingCompanyID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `AllSpark`.`Address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `AllSpark`.`Address` ;

CREATE TABLE IF NOT EXISTS `AllSpark`.`Address` (
  `AddressID` BIGINT NOT NULL AUTO_INCREMENT,
  `Line1` VARCHAR(60) NOT NULL,
  `Line2` VARCHAR(60) NULL,
  `Town` VARCHAR(60) NULL,
  `County` VARCHAR(60) NULL,
  `PostCode` VARCHAR(10) NOT NULL,
  `Country` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`AddressID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `InvoiceDB`.`InvoiceSummary`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `InvoiceDB`.`InvoiceSummary` ;

CREATE TABLE IF NOT EXISTS `InvoiceDB`.`InvoiceSummary` (
  `InvoiceNumber` VARCHAR(25) NOT NULL COMMENT 'Alternative:\n- InvoiceNumber INT\n- then, use max(InvoiceNumber)+1 BY AccountNumber\n- InvoiceNumberString AS CONCAT_WS(\'-\',AccountNumber,InvoiceNumber)\n- PK(AccountNumber, InvoiceNumber) \n- Free text for \"ACCT-0003-TEST1\"',
  `InvoiceBatchNumber` BIGINT NOT NULL,
  `InvoicingCompanyID` SMALLINT NOT NULL,
  `InvoiceTypeID` SMALLINT NOT NULL,
  `BillTypeID` SMALLINT NOT NULL,
  `CustomerID` BIGINT NOT NULL,
  `AccountNumber` VARCHAR(15) NOT NULL,
  `InvoiceGenerationDate` DATETIME NOT NULL,
  `InvoiceDisplayDate` DATE NOT NULL,
  `InvoiceDueDate` DATE NOT NULL,
  `RolledBackFlag` TINYINT(1) NOT NULL,
  `InvoiceVersion` TINYINT NOT NULL,
  `InvoiceCurrency` VARCHAR(3) NOT NULL,
  `AccountPreviousBalance` DECIMAL(18,4) NOT NULL,
  `InvoiceVATableTotal` DECIMAL(18,4) NOT NULL,
  `InvoiceNet` DECIMAL(18,2) NOT NULL,
  `InvoiceVAT` DECIMAL(18,2) NOT NULL,
  `InvoiceTotal` DECIMAL(18,2) NOT NULL,
  `AddressID` BIGINT NOT NULL,
  `InvoicePaymentTypeID` SMALLINT NOT NULL,
  `InvoiceLayoutTypeID` SMALLINT NOT NULL,
  PRIMARY KEY (`InvoiceNumber`),
  CONSTRAINT `fk_InvoiceSummary_PaymentType`
    FOREIGN KEY (`InvoicePaymentTypeID`)
    REFERENCES `ReferenceDB`.`PaymentType` (`PaymentTypeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_InvoiceSummary_BillType1`
    FOREIGN KEY (`BillTypeID`)
    REFERENCES `ReferenceDB`.`BillType` (`BillTypeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_InvoiceSummary_InvoiceLayoutType1`
    FOREIGN KEY (`InvoiceLayoutTypeID`)
    REFERENCES `ReferenceDB`.`InvoiceLayoutType` (`InvoiceLayoutTypeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_InvoiceSummary_InvoiceType1`
    FOREIGN KEY (`InvoiceTypeID`)
    REFERENCES `ReferenceDB`.`InvoiceType` (`InvoiceTypeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_InvoiceSummary_InvoicingCompany1`
    FOREIGN KEY (`InvoicingCompanyID`)
    REFERENCES `ReferenceDB`.`InvoicingCompany` (`InvoicingCompanyID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_InvoiceSummary_InvoiceBatchSummary1`
    FOREIGN KEY (`InvoiceBatchNumber`)
    REFERENCES `InvoiceDB`.`InvoiceBatchSummary` (`InvoiceBatchNumber`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_InvoiceSummary_Address1`
    FOREIGN KEY (`AddressID`)
    REFERENCES `AllSpark`.`Address` (`AddressID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_InvoiceSummary_PaymentType_idx` ON `InvoiceDB`.`InvoiceSummary` (`InvoicePaymentTypeID` ASC);

CREATE INDEX `fk_InvoiceSummary_BillType1_idx` ON `InvoiceDB`.`InvoiceSummary` (`BillTypeID` ASC);

CREATE INDEX `fk_InvoiceSummary_InvoiceLayoutType1_idx` ON `InvoiceDB`.`InvoiceSummary` (`InvoiceLayoutTypeID` ASC);

CREATE INDEX `fk_InvoiceSummary_InvoiceType1_idx` ON `InvoiceDB`.`InvoiceSummary` (`InvoiceTypeID` ASC);

CREATE INDEX `fk_InvoiceSummary_InvoicingCompany1_idx` ON `InvoiceDB`.`InvoiceSummary` (`InvoicingCompanyID` ASC);

CREATE INDEX `fk_InvoiceSummary_InvoiceBatchSummary1_idx` ON `InvoiceDB`.`InvoiceSummary` (`InvoiceBatchNumber` ASC);

CREATE INDEX `fk_InvoiceSummary_Address1_idx` ON `InvoiceDB`.`InvoiceSummary` (`AddressID` ASC);


-- -----------------------------------------------------
-- Table `AllSpark`.`Customer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `AllSpark`.`Customer` ;

CREATE TABLE IF NOT EXISTS `AllSpark`.`Customer` (
  `CustomerID` BIGINT NOT NULL AUTO_INCREMENT,
  `AccountNumber` VARCHAR(15) NOT NULL,
  `Name` VARCHAR(60) NOT NULL,
  `AddressID` BIGINT NOT NULL,
  PRIMARY KEY (`CustomerID`),
  CONSTRAINT `fk_Customer_Address1`
    FOREIGN KEY (`AddressID`)
    REFERENCES `AllSpark`.`Address` (`AddressID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `AccountNumber_UNIQUE` ON `AllSpark`.`Customer` (`AccountNumber` ASC);

CREATE INDEX `fk_Customer_Address1_idx` ON `AllSpark`.`Customer` (`AddressID` ASC);


-- -----------------------------------------------------
-- Table `AllSpark`.`BillingReference`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `AllSpark`.`BillingReference` ;

CREATE TABLE IF NOT EXISTS `AllSpark`.`BillingReference` (
  `BillingReferenceID` BIGINT NOT NULL AUTO_INCREMENT,
  `CustomerID` BIGINT NOT NULL,
  `AccountNumber` VARCHAR(15) NOT NULL,
  `NodeID` BIGINT NOT NULL,
  `OrderNumber` VARCHAR(15) NOT NULL,
  `BillingReference` VARCHAR(25) NOT NULL,
  `BillingReferenceStartDate` DATE NOT NULL,
  `BillingReferenceEndDate` DATE NOT NULL,
  `SupplierContractStartDate` DATE NOT NULL,
  `SupplierContractEndDate` DATE NOT NULL,
  `CustomerContractStartDate` DATE NOT NULL,
  `CustomerContractEndDate` DATE NOT NULL,
  `BillingReferenceCreateDate` DATETIME NOT NULL,
  `BillingReferenceCreateUser` VARCHAR(25) NOT NULL,
  `CustomerCustomReference` VARCHAR(75) NULL,
  `CustomerSiteName` VARCHAR(75) NOT NULL,
  `InstallationPostCode` VARCHAR(10) NOT NULL,
  `CustomerCostCentre` VARCHAR(75) NOT NULL,
  `CustomerPONumber` VARCHAR(75) NOT NULL,
  `GCISalesManager` VARCHAR(75) NOT NULL,
  `SupplierReference_1` VARCHAR(50) NULL,
  `SupplierReference_2` VARCHAR(50) NULL,
  `SupplierReference_3` VARCHAR(50) NULL,
  `GCICustomField_1` VARCHAR(50) NULL,
  `GCICustomField_2` VARCHAR(50) NULL,
  `GCICustomField_3` VARCHAR(50) NULL,
  PRIMARY KEY (`BillingReferenceID`),
  CONSTRAINT `fk_BillingReference_Customer1`
    FOREIGN KEY (`CustomerID`)
    REFERENCES `AllSpark`.`Customer` (`CustomerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_BillingReference_Customer1_idx` ON `AllSpark`.`BillingReference` (`CustomerID` ASC);


-- -----------------------------------------------------
-- Table `AllSpark`.`CustomerProductCharge`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `AllSpark`.`CustomerProductCharge` ;

CREATE TABLE IF NOT EXISTS `AllSpark`.`CustomerProductCharge` (
  `CustomerProductChargeID` BIGINT NOT NULL AUTO_INCREMENT,
  `CustomerID` BIGINT NOT NULL,
  `AccountNumber` VARCHAR(15) NOT NULL,
  `OrderNumber` VARCHAR(15) NOT NULL,
  `BillingReferenceID` BIGINT NOT NULL,
  `ProductID` BIGINT NOT NULL,
  `DefaultProductDescription` VARCHAR(75) NOT NULL,
  `ChargeInstanceDescription` VARCHAR(75) NULL,
  `ChargeQuantity` BIGINT NOT NULL,
  `ProductChargeFrequencyID` SMALLINT NOT NULL,
  `UnitCostToGCI` DECIMAL(18,4) NOT NULL,
  `UnitChargeToCustomer` DECIMAL(18,4) NOT NULL,
  `ChargeTaxTypeFlag` SMALLINT NOT NULL,
  `ChargeStartDate` DATE NOT NULL,
  `ChargeEndDate` DATE NULL COMMENT 'X = That day.\nNULL = Never ends.',
  `ChargeBilledUntil` DATE NULL COMMENT 'X = End of that day.\nNULL = Start of ChargeStartDate.\n(so e.g. Jan 1 - Jan 1 = \"paid for that day\", Jan 1 - NONE = \"not started yet\")',
  `SupplierContractStartDate` DATE NOT NULL,
  `SupplierContractEndDate` DATE NOT NULL,
  `CustomerContractStartDate` DATE NOT NULL,
  `CustomerContractEndDate` DATE NOT NULL,
  `AllowCreditBackFlag` TINYINT(1) NOT NULL,
  `CustomerCustomReference` VARCHAR(75) NULL,
  `ChargeInstanceCreateDate` DATETIME NOT NULL,
  `ChargeInstanceCreateUser` VARCHAR(25) NOT NULL,
  PRIMARY KEY (`CustomerProductChargeID`),
  CONSTRAINT `fk_CustomerProductCharge_Customer`
    FOREIGN KEY (`CustomerID`)
    REFERENCES `AllSpark`.`Customer` (`CustomerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CustomerProductCharge_BillingReference1`
    FOREIGN KEY (`BillingReferenceID`)
    REFERENCES `AllSpark`.`BillingReference` (`BillingReferenceID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_CustomerProductCharge_Customer_idx` ON `AllSpark`.`CustomerProductCharge` (`CustomerID` ASC);

CREATE INDEX `fk_CustomerProductCharge_BillingReference1_idx` ON `AllSpark`.`CustomerProductCharge` (`BillingReferenceID` ASC);


-- -----------------------------------------------------
-- Table `ChargingDB`.`ChargeHistoryType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ChargingDB`.`ChargeHistoryType` ;

CREATE TABLE IF NOT EXISTS `ChargingDB`.`ChargeHistoryType` (
  `ChargeHistoryTypeID` SMALLINT NOT NULL,
  `ChargeHistoryTypeCode` VARCHAR(40) NOT NULL,
  `ChargeHistoryTypeDescription` VARCHAR(200) NULL,
  PRIMARY KEY (`ChargeHistoryTypeID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ChargingDB`.`ProductChargeCategory`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ChargingDB`.`ProductChargeCategory` ;

CREATE TABLE IF NOT EXISTS `ChargingDB`.`ProductChargeCategory` (
  `ProductChargeCategoryID` SMALLINT NOT NULL,
  `ProductChargeCategoryCode` VARCHAR(40) NOT NULL,
  `ProductChargeCategoryDescription` VARCHAR(200) NULL,
  PRIMARY KEY (`ProductChargeCategoryID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ChargingDB`.`ProductChargeFrequency`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ChargingDB`.`ProductChargeFrequency` ;

CREATE TABLE IF NOT EXISTS `ChargingDB`.`ProductChargeFrequency` (
  `ProductChargeFrequencyID` SMALLINT NOT NULL,
  `ProductChargeFrequencyCode` VARCHAR(40) NOT NULL,
  `ProductChargeFrequencyDescription` VARCHAR(200) NOT NULL,
  PRIMARY KEY (`ProductChargeFrequencyID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `InvoiceDB`.`InvoiceChargeSummary`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `InvoiceDB`.`InvoiceChargeSummary` ;

CREATE TABLE IF NOT EXISTS `InvoiceDB`.`InvoiceChargeSummary` (
  `InvoiceChargeID` BIGINT NOT NULL AUTO_INCREMENT,
  `InvoiceBatchNumber` BIGINT NOT NULL,
  `InvoiceNumber` VARCHAR(25) NOT NULL,
  `CustomerID` BIGINT NOT NULL,
  `AccountNumber` VARCHAR(15) NOT NULL,
  `CustomerProductChargeID` BIGINT NULL COMMENT 'Not present for e.g. Call Charges.',
  `BillingReferenceID` BIGINT NOT NULL,
  `ProductID` BIGINT NOT NULL,
  `ChargeInstanceDescription` VARCHAR(75) NOT NULL,
  `ProductChargeCategoryID` SMALLINT NOT NULL,
  `ProductChargeFrequencyID` SMALLINT NOT NULL,
  `ChargeQuantity` INT NOT NULL,
  `UnitCostToGCI` DECIMAL(18,4) NOT NULL,
  `UnitChargeToCustomer` DECIMAL(18,4) NOT NULL,
  `ChargePeriodStartDate` DATE NOT NULL,
  `ChargePeriodEndDate` DATE NOT NULL,
  `TotalCostToGCI` DECIMAL(18,4) NOT NULL,
  `TotalChargeToCustomer` DECIMAL(18,4) NOT NULL,
  `TotalVATToCustomer` DECIMAL(18,4) NOT NULL,
  `ChargeTaxTypeFlag` SMALLINT NOT NULL,
  `ChargeHistoryTypeID` SMALLINT NOT NULL,
  `CustomerCustomReference` VARCHAR(75) NOT NULL,
  PRIMARY KEY (`InvoiceChargeID`),
  CONSTRAINT `fk_InvoiceChargeSummary_InvoiceSummary1`
    FOREIGN KEY (`InvoiceNumber`)
    REFERENCES `InvoiceDB`.`InvoiceSummary` (`InvoiceNumber`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_InvoiceChargeSummary_InvoiceBatchSummary1`
    FOREIGN KEY (`InvoiceBatchNumber`)
    REFERENCES `InvoiceDB`.`InvoiceBatchSummary` (`InvoiceBatchNumber`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_InvoiceChargeSummary_CustomerProductCharge1`
    FOREIGN KEY (`CustomerProductChargeID`)
    REFERENCES `AllSpark`.`CustomerProductCharge` (`CustomerProductChargeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_InvoiceChargeSummary_ChargeHistoryType1`
    FOREIGN KEY (`ChargeHistoryTypeID`)
    REFERENCES `ChargingDB`.`ChargeHistoryType` (`ChargeHistoryTypeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_InvoiceChargeSummary_ProductChargeCategory1`
    FOREIGN KEY (`ProductChargeCategoryID`)
    REFERENCES `ChargingDB`.`ProductChargeCategory` (`ProductChargeCategoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_InvoiceChargeSummary_ProductChargeFrequency1`
    FOREIGN KEY (`ProductChargeFrequencyID`)
    REFERENCES `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_InvoiceChargeSummary_Customer1`
    FOREIGN KEY (`CustomerID`)
    REFERENCES `AllSpark`.`Customer` (`CustomerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_InvoiceChargeSummary_InvoiceSummary1_idx` ON `InvoiceDB`.`InvoiceChargeSummary` (`InvoiceNumber` ASC);

CREATE INDEX `fk_InvoiceChargeSummary_InvoiceBatchSummary1_idx` ON `InvoiceDB`.`InvoiceChargeSummary` (`InvoiceBatchNumber` ASC);

CREATE INDEX `fk_InvoiceChargeSummary_CustomerProductCharge1_idx` ON `InvoiceDB`.`InvoiceChargeSummary` (`CustomerProductChargeID` ASC);

CREATE INDEX `fk_InvoiceChargeSummary_ChargeHistoryType1_idx` ON `InvoiceDB`.`InvoiceChargeSummary` (`ChargeHistoryTypeID` ASC);

CREATE INDEX `fk_InvoiceChargeSummary_ProductChargeCategory1_idx` ON `InvoiceDB`.`InvoiceChargeSummary` (`ProductChargeCategoryID` ASC);

CREATE INDEX `fk_InvoiceChargeSummary_ProductChargeFrequency1_idx` ON `InvoiceDB`.`InvoiceChargeSummary` (`ProductChargeFrequencyID` ASC);

CREATE INDEX `fk_InvoiceChargeSummary_Customer1_idx` ON `InvoiceDB`.`InvoiceChargeSummary` (`CustomerID` ASC);

USE `ReferenceDB` ;
USE `ChargingDB` ;

-- -----------------------------------------------------
-- Table `ChargingDB`.`ProductChargingType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ChargingDB`.`ProductChargingType` ;

CREATE TABLE IF NOT EXISTS `ChargingDB`.`ProductChargingType` (
  `ProductChargingTypeID` SMALLINT NOT NULL,
  `ProductChargingTypeCode` VARCHAR(40) NOT NULL,
  `ProductChargingTypeDescription` VARCHAR(200) NULL,
  `Cost` TINYINT NOT NULL,
  `Sell` TINYINT NOT NULL,
  PRIMARY KEY (`ProductChargingTypeID`))
ENGINE = InnoDB;

USE `AllSpark` ;
USE `RatedEventsDB` ;

-- -----------------------------------------------------
-- Table `RatedEventsDB`.`KilledEvent`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `RatedEventsDB`.`KilledEvent` ;

CREATE TABLE IF NOT EXISTS `RatedEventsDB`.`KilledEvent` (
  `KilledBatchNum` DECIMAL(14,0) NULL,
  `KilledTime` DATETIME NULL,
  `KilledReason` VARCHAR(50) NULL,
  `EventRecordID` DECIMAL(10) NOT NULL,
  `EventRecordCreateDate` DATETIME NOT NULL,
  `CustomerID` DECIMAL(10) NOT NULL,
  `AccountNumber` VARCHAR(15) NULL,
  `BilledFlag` TINYINT NOT NULL,
  `InvoiceBatchNumber` DECIMAL(14,0) NULL,
  `InvoiceNumber` VARCHAR(20) NULL,
  `AccountingPeriod` DECIMAL(6) NOT NULL,
  `EventReference` VARCHAR(50) NOT NULL,
  `EventID` DECIMAL(10) NOT NULL,
  `OriginatingCLI` VARCHAR(50) NULL,
  `DialledCLI` VARCHAR(50) NULL,
  `TerminatingCLI` VARCHAR(50) NULL,
  `PresentationCLI` VARCHAR(50) NULL,
  `Extension` VARCHAR(50) NULL,
  `EventTypeID` DECIMAL(10) NULL,
  `EventTime` DATETIME NOT NULL,
  `EventDuration` DECIMAL(10,4) NOT NULL,
  `WeekDayFlag` DECIMAL(1) NULL,
  `TimePeriod` DECIMAL(1) NULL,
  `EventBandID` DECIMAL(10) NULL,
  `CarrierCost` DECIMAL(18,4) NULL,
  `RatingPlanID` DECIMAL(10) NULL,
  `RateMethodID` DECIMAL(2) NULL,
  `MarkedUpFlag` TINYINT NULL,
  `PreRatedEventFlag` TINYINT NOT NULL,
  `BundledFlag` TINYINT NULL,
  `PPC` DECIMAL(18,4) NULL,
  `PPM` DECIMAL(18,4) NULL,
  `RawCustomerCharge` DECIMAL(18,4) NULL,
  `BundledDuration` DECIMAL(18,4) NULL,
  `BilledDuration` DECIMAL(18,4) NULL,
  `CustomerCharge` DECIMAL(18,4) NOT NULL,
  `VATFlag` DECIMAL(1) NOT NULL,
  `VATCharge` DECIMAL(10,4) NOT NULL,
  `Country` VARCHAR(75) NULL,
  `EventFileID` DECIMAL(10) NOT NULL,
  `CarrierID` DECIMAL(10) NOT NULL,
  `CarrierTariffID` DECIMAL(10) NULL,
  `CarrierAccountID` DECIMAL(10) NULL,
  `SupplierRecordReference` VARCHAR(100) NULL,
  `SupplierEventBand` VARCHAR(75) NULL,
  `SupplierRatingPattern` VARCHAR(100) NULL,
  `ChargeTaxTypeFlag` DECIMAL(2) NULL,
  `DuplicateFlag` TINYINT NULL)
ENGINE = InnoDB;

CREATE INDEX `InvoiceNumber` ON `RatedEventsDB`.`KilledEvent` (`InvoiceNumber` ASC);

CREATE INDEX `CustomerID` ON `RatedEventsDB`.`KilledEvent` (`CustomerID` ASC);

CREATE INDEX `InvoiceBatchNumber` ON `RatedEventsDB`.`KilledEvent` (`InvoiceBatchNumber` ASC);

CREATE INDEX `EventRecordID` ON `RatedEventsDB`.`KilledEvent` (`EventRecordID` ASC);

CREATE INDEX `EventID` ON `RatedEventsDB`.`KilledEvent` (`EventID` ASC);

CREATE INDEX `AccountingPeriod` ON `RatedEventsDB`.`KilledEvent` (`AccountingPeriod` ASC);

CREATE INDEX `EventBandID` ON `RatedEventsDB`.`KilledEvent` (`EventBandID` ASC);

CREATE INDEX `RatingPlanID` ON `RatedEventsDB`.`KilledEvent` (`RatingPlanID` ASC);

CREATE INDEX `CarrierID` ON `RatedEventsDB`.`KilledEvent` (`CarrierID` ASC);

CREATE INDEX `CarrierTariffID` ON `RatedEventsDB`.`KilledEvent` (`CarrierTariffID` ASC);


-- -----------------------------------------------------
-- Table `RatedEventsDB`.`RatedEvent`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `RatedEventsDB`.`RatedEvent` ;

CREATE TABLE IF NOT EXISTS `RatedEventsDB`.`RatedEvent` (
  `EventRecordID` DECIMAL(10) NOT NULL,
  `EventRecordCreateDate` DATETIME NOT NULL,
  `CustomerID` DECIMAL(10) NOT NULL,
  `AccountNumber` VARCHAR(15) NULL,
  `BilledFlag` TINYINT NOT NULL,
  `BilledInvoiceChargeSummaryID` BIGINT NULL,
  `BilledInvoiceBatchNumber` DECIMAL(14,0) NULL,
  `BilledInvoiceNumber` VARCHAR(20) NULL,
  `AccountingPeriod` DECIMAL(6) NOT NULL,
  `EventReference` VARCHAR(50) NOT NULL,
  `EventID` DECIMAL(10) NOT NULL,
  `OriginatingCLI` VARCHAR(50) NULL,
  `DialledCLI` VARCHAR(50) NULL,
  `TerminatingCLI` VARCHAR(50) NULL,
  `PresentationCLI` VARCHAR(50) NULL,
  `Extension` VARCHAR(50) NULL,
  `EventTypeID` DECIMAL(10) NULL,
  `EventTime` DATETIME NOT NULL,
  `EventDuration` DECIMAL(10,4) NOT NULL,
  `WeekDayFlag` DECIMAL(1) NULL,
  `TimePeriod` DECIMAL(1) NULL,
  `EventBandID` DECIMAL(10) NULL,
  `CarrierCost` DECIMAL(18,4) NULL,
  `RatingPlanID` DECIMAL(10) NULL,
  `RateMethodID` DECIMAL(2) NULL,
  `MarkedUpFlag` TINYINT NULL,
  `PreRatedEventFlag` TINYINT NOT NULL,
  `BundledFlag` TINYINT NULL,
  `PPC` DECIMAL(18,4) NULL,
  `PPM` DECIMAL(18,4) NULL,
  `RawCustomerCharge` DECIMAL(18,4) NULL,
  `BundledDuration` DECIMAL(18,4) NULL,
  `BilledDuration` DECIMAL(18,4) NULL,
  `CustomerCharge` DECIMAL(18,4) NOT NULL,
  `VATFlag` DECIMAL(1) NOT NULL,
  `VATCharge` DECIMAL(10,4) NOT NULL,
  `Country` VARCHAR(75) NULL,
  `EventFileID` DECIMAL(10) NOT NULL,
  `CarrierID` DECIMAL(10) NOT NULL,
  `CarrierTariffID` DECIMAL(10) NULL,
  `CarrierAccountID` DECIMAL(10) NULL,
  `SupplierRecordReference` VARCHAR(100) NULL,
  `SupplierEventBand` VARCHAR(75) NULL,
  `SupplierRatingPattern` VARCHAR(100) NULL,
  `ChargeTaxTypeFlag` DECIMAL(2) NULL,
  `DuplicateFlag` TINYINT NULL,
  CONSTRAINT `fk_RatedEvent_InvoiceBatchSummary`
    FOREIGN KEY (`BilledInvoiceBatchNumber`)
    REFERENCES `InvoiceDB`.`InvoiceBatchSummary` (`InvoiceBatchNumber`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_RatedEvent_InvoiceSummary1`
    FOREIGN KEY (`BilledInvoiceNumber`)
    REFERENCES `InvoiceDB`.`InvoiceSummary` (`InvoiceNumber`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_RatedEvent_InvoiceChargeSummary1`
    FOREIGN KEY (`BilledInvoiceChargeSummaryID`)
    REFERENCES `InvoiceDB`.`InvoiceChargeSummary` (`InvoiceChargeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `InvoiceNumber` ON `RatedEventsDB`.`RatedEvent` (`BilledInvoiceNumber` ASC);

CREATE INDEX `CustomerID` ON `RatedEventsDB`.`RatedEvent` (`CustomerID` ASC);

CREATE INDEX `InvoiceBatchNumber` ON `RatedEventsDB`.`RatedEvent` (`BilledInvoiceBatchNumber` ASC);

CREATE INDEX `EventRecordID` ON `RatedEventsDB`.`RatedEvent` (`EventRecordID` ASC);

CREATE INDEX `EventID` ON `RatedEventsDB`.`RatedEvent` (`EventID` ASC);

CREATE INDEX `AccountingPeriod` ON `RatedEventsDB`.`RatedEvent` (`AccountingPeriod` ASC);

CREATE INDEX `EventBandID` ON `RatedEventsDB`.`RatedEvent` (`EventBandID` ASC);

CREATE INDEX `RatingPlanID` ON `RatedEventsDB`.`RatedEvent` (`RatingPlanID` ASC);

CREATE INDEX `CarrierID` ON `RatedEventsDB`.`RatedEvent` (`CarrierID` ASC);

CREATE INDEX `CarrierTariffID` ON `RatedEventsDB`.`RatedEvent` (`CarrierTariffID` ASC);

CREATE INDEX `fk_RatedEvent_InvoiceChargeSummary1_idx` ON `RatedEventsDB`.`RatedEvent` (`BilledInvoiceChargeSummaryID` ASC);

USE `RatingDB` ;

-- -----------------------------------------------------
-- Table `RatingDB`.`NumberRangeMap`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `RatingDB`.`NumberRangeMap` ;

CREATE TABLE IF NOT EXISTS `RatingDB`.`NumberRangeMap` (
  `NumberRangeMapID` BIGINT NOT NULL AUTO_INCREMENT,
  `NumberRange` BIGINT NOT NULL,
  `NumberRangeClassification` VARCHAR(80) NOT NULL COMMENT 'Charge band, pn4',
  `NumberRangeBespokeFlag` TINYINT(1) NOT NULL,
  `NumberRangeSource` SMALLINT NOT NULL COMMENT 'Where these numbers came from e.g. NonGeo, 118, National (or, this is a view combining those source tables)',
  `NumberRangeType` VARCHAR(30) NOT NULL COMMENT 'GCI_Bespoke, etc',
  `NumberRangeStartDate` DATE NOT NULL,
  `NumberRangeEndDate` DATE NOT NULL,
  PRIMARY KEY (`NumberRangeMapID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `RatingDB`.`Supplier`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `RatingDB`.`Supplier` ;

CREATE TABLE IF NOT EXISTS `RatingDB`.`Supplier` (
  `SupplierID` BIGINT NOT NULL,
  `SupplierName` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`SupplierID`))
ENGINE = InnoDB;

USE `ImportedEventsDB` ;

-- -----------------------------------------------------
-- Table `RatingDB`.`TimePeriodMap`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `RatingDB`.`TimePeriodMap` ;

CREATE TABLE `RatingDB`.`TimePeriodMap` (
  `TimePeriodID` smallint(8) DEFAULT NULL,
  `TimePeriodCode` varchar(15) DEFAULT NULL,
  `TimePeriodDescription` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
ALTER TABLE `RatingDB`.`TimePeriodMap` 
CHANGE COLUMN `TimePeriodID` `TimePeriodID` SMALLINT(8) NOT NULL ,
ADD COLUMN `TimePeriodStartDay` INT NOT NULL COMMENT 'any one value from 1-7 for MON-SUN respectively' AFTER `TimePeriodDescription`,
ADD COLUMN `TimePeriodEndDay` INT NOT NULL COMMENT 'any one value from 1-7 for MON-SUN respectively' AFTER `TimePeriodStartDay`,
ADD COLUMN `TimePeriodStartTime` TIME NOT NULL COMMENT '\'HH:MM:SS\' format' AFTER `TimePeriodEndDay`,
ADD COLUMN `TimePeriodEndTime` TIME NOT NULL COMMENT '\'HH:MM:SS\' format' AFTER `TimePeriodStartTime`,
ADD PRIMARY KEY (`TimePeriodID`);

ALTER TABLE `RatingDB`.`TimePeriodMap` 
CHANGE COLUMN `TimePeriodID` `TimePeriodID` INT(1) NOT NULL ;


-- -----------------------------------------------------
-- Table `ImportedEventsDB`.`EventFile`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ImportedEventsDB`.`EventFile` ;

CREATE TABLE IF NOT EXISTS `ImportedEventsDB`.`EventFile` (
  `EventFileID` BIGINT NOT NULL AUTO_INCREMENT,
  `EventFileName` VARCHAR(255) NULL,
  `EventFileChecksum` VARCHAR(45) NULL,
  `DateProcessed` DATETIME NULL,
  `SupplierID` BIGINT NULL,
  `ImportRunNumber` INT NULL,
  `CreatedBy` VARCHAR(50) NOT NULL,
  `CreatedDate` DATETIME NOT NULL,
  `LastModifiedBy` VARCHAR(50) NULL,
  `LastModifiedDate` DATETIME NULL,
  PRIMARY KEY (`EventFileID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ImportedEventsDB`.`EventFileDetails`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ImportedEventsDB`.`EventFileDetails` ;

CREATE TABLE IF NOT EXISTS `ImportedEventsDB`.`EventFileDetails` (
  `EventFileID` BIGINT NOT NULL,
  `NumberOfRecords` INT NULL,
  `HeaderAndTrailerRecordCount` INT NULL,
  `EventRecordCount` INT NULL,
  `SuccessRecordCount` INT NULL,
  `KilledRecordCount` INT NULL,
  `ErrorRecordCount` INT NULL,
  `DuplicateRecordCount` INT NULL,
  `ErrorRunsCount` INT NULL,
  CONSTRAINT `EventFileID_FK`
    FOREIGN KEY (`EventFileID`)
    REFERENCES `ImportedEventsDB`.`EventFile` (`EventFileID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ImportedEventsDB`.`ImportedEvent`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ImportedEventsDB`.`ImportedEvent` ;

CREATE TABLE IF NOT EXISTS `ImportedEventsDB`.`ImportedEvent` (
  `EventRecordKey` VARCHAR(45) NOT NULL,
  `CustomerID` BIGINT NOT NULL,
  `AccountNumber` VARCHAR(45) NOT NULL,
  `AccountingPeriod` VARCHAR(45) NOT NULL,
  `EventReference` VARCHAR(45) NOT NULL,
  `EventReferenceID` BIGINT NOT NULL,
  `OriginatingCLI` VARCHAR(45) NOT NULL,
  `DialledCLI` VARCHAR(45) NOT NULL,
  `TerminatingCLI` VARCHAR(45) NOT NULL,
  `PresentationCLI` VARCHAR(45) NULL,
  `EventTypeID` BIGINT NOT NULL,
  `EventTime` DATETIME NOT NULL,
  `EventDurationSecs` INT NOT NULL,
  `WeekDayFlag` INT NOT NULL,
  `TimePeriod` VARCHAR(45) NOT NULL,
  `NumberRange` VARCHAR(45) NOT NULL,
  `NumberRangeClassification` VARCHAR(45) NOT NULL,
  `NumberRangeType` VARCHAR(45) NOT NULL,
  `Country` VARCHAR(45) NULL,
  `PreRatedEventFlag` VARCHAR(45) NOT NULL,
  `EventFileID` BIGINT NOT NULL,
  `SupplierID` BIGINT NOT NULL,
  `SupplierAccountNumber` VARCHAR(45) NOT NULL,
  `SupplierRecordReference` VARCHAR(45) NULL,
  `SupplierNumberRange` VARCHAR(45) NULL,
  `SupplierNumberRangeMap` VARCHAR(45) NULL,
  `SupplierTariffPlanID` BIGINT NULL,
  `SupplierRatingPattern` VARCHAR(45) NULL,
  `SupplierServiceType` VARCHAR(45) NULL,
  `SupplierCost` VARCHAR(50) NOT NULL,
  `CreatedBy` VARCHAR(50) NOT NULL,
  `CreatedDate` DATETIME NOT NULL,
  `LastModifiedBy` VARCHAR(50) NULL,
  `LastModifiedDate` DATETIME NULL,
  PRIMARY KEY (`EventRecordKey`))
ENGINE = InnoDB;

ALTER TABLE `ImportedEventsDB`.`ImportedEvents` 
CHANGE COLUMN `PreRatedEventFlag` `PreRatedEventFlag` INT NOT NULL COMMENT 'Flag to store flag as 1 if imported cdr records are already rated' ;
ALTER TABLE `ImportedEventsDB`.`ImportedEvents` 
ADD COLUMN `rated` INT NULL COMMENT 'Flag to mark records rated as true once rating process perform caluclation on this record' AFTER `LastModifiedDate`;

ALTER TABLE `ImportedEventsDB`.`ImportedEvents` 
CHANGE COLUMN `TimePeriod` `TimePeriodID` INT(1) NOT NULL COMMENT 'TimePeriodID refers to RatingDB.TimePeriodMap.TimePeriodID table' ;


-- -----------------------------------------------------
-- Table `ImportedEventsDB`.`AuditEvent`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ImportedEventsDB`.`AuditEvent` ;

CREATE TABLE IF NOT EXISTS `ImportedEventsDB`.`AuditEvent` (
  `EventID` BIGINT NOT NULL AUTO_INCREMENT,
  `EventType` VARCHAR(30) NOT NULL,
  `EventDate` DATETIME NOT NULL,
  `CreatedBy` VARCHAR(50) NOT NULL,
  `CreatedDate` DATETIME NOT NULL,
  `LastModifiedBy` VARCHAR(50) NULL,
  `LastModifiedDate` DATETIME NULL,
  PRIMARY KEY (`EventID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ImportedEventsDB`.`AuditEventData`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ImportedEventsDB`.`AuditEventData` ;

CREATE TABLE IF NOT EXISTS `ImportedEventsDB`.`AuditEventData` (
  `EventID` BIGINT NOT NULL,
  `DataName` VARCHAR(30) NOT NULL,
  `Value` TEXT NOT NULL,
  PRIMARY KEY (`EventID`, `DataName`),
  CONSTRAINT `EventID_FK`
    FOREIGN KEY (`EventID`)
    REFERENCES `ImportedEventsDB`.`AuditEvent` (`EventID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `ReferenceDB`.`PaymentType`
-- -----------------------------------------------------
START TRANSACTION;
USE `ReferenceDB`;
INSERT INTO `ReferenceDB`.`PaymentType` (`PaymentTypeID`, `PaymentTypeCode`, `PaymentTypeDescription`) VALUES (401, 'DirectDebit', NULL);
INSERT INTO `ReferenceDB`.`PaymentType` (`PaymentTypeID`, `PaymentTypeCode`, `PaymentTypeDescription`) VALUES (402, 'Cheque', NULL);
INSERT INTO `ReferenceDB`.`PaymentType` (`PaymentTypeID`, `PaymentTypeCode`, `PaymentTypeDescription`) VALUES (403, 'StandingOrder', NULL);
INSERT INTO `ReferenceDB`.`PaymentType` (`PaymentTypeID`, `PaymentTypeCode`, `PaymentTypeDescription`) VALUES (404, 'CreditCard', NULL);
INSERT INTO `ReferenceDB`.`PaymentType` (`PaymentTypeID`, `PaymentTypeCode`, `PaymentTypeDescription`) VALUES (405, 'BACS', NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `ReferenceDB`.`BillType`
-- -----------------------------------------------------
START TRANSACTION;
USE `ReferenceDB`;
INSERT INTO `ReferenceDB`.`BillType` (`BillTypeID`, `BillTypeCode`, `BillTypeDescription`) VALUES (301, 'Default', NULL);
INSERT INTO `ReferenceDB`.`BillType` (`BillTypeID`, `BillTypeCode`, `BillTypeDescription`) VALUES (302, 'DRC', NULL);
INSERT INTO `ReferenceDB`.`BillType` (`BillTypeID`, `BillTypeCode`, `BillTypeDescription`) VALUES (303, 'SelfBill', NULL);
INSERT INTO `ReferenceDB`.`BillType` (`BillTypeID`, `BillTypeCode`, `BillTypeDescription`) VALUES (304, 'Statement', NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `ReferenceDB`.`InvoiceType`
-- -----------------------------------------------------
START TRANSACTION;
USE `ReferenceDB`;
INSERT INTO `ReferenceDB`.`InvoiceType` (`InvoiceTypeID`, `InvoiceTypeCode`, `InvoiceTypeDescription`, `Initiation`, `Events`, `Charges`) VALUES (201, 'InitiationPeriodic', NULL, 1, 1, 1);
INSERT INTO `ReferenceDB`.`InvoiceType` (`InvoiceTypeID`, `InvoiceTypeCode`, `InvoiceTypeDescription`, `Initiation`, `Events`, `Charges`) VALUES (202, 'InitiationAdhocEventsOnly', NULL, 1, 1, 0);
INSERT INTO `ReferenceDB`.`InvoiceType` (`InvoiceTypeID`, `InvoiceTypeCode`, `InvoiceTypeDescription`, `Initiation`, `Events`, `Charges`) VALUES (203, 'InitiationAdhocChargesOnly', NULL, 1, 0, 1);
INSERT INTO `ReferenceDB`.`InvoiceType` (`InvoiceTypeID`, `InvoiceTypeCode`, `InvoiceTypeDescription`, `Initiation`, `Events`, `Charges`) VALUES (204, 'Periodic', NULL, 0, 1, 1);
INSERT INTO `ReferenceDB`.`InvoiceType` (`InvoiceTypeID`, `InvoiceTypeCode`, `InvoiceTypeDescription`, `Initiation`, `Events`, `Charges`) VALUES (205, 'AdhocEventsOnly', NULL, 0, 1, 0);
INSERT INTO `ReferenceDB`.`InvoiceType` (`InvoiceTypeID`, `InvoiceTypeCode`, `InvoiceTypeDescription`, `Initiation`, `Events`, `Charges`) VALUES (206, 'AdhocChargesOnly', NULL, 0, 0, 1);
INSERT INTO `ReferenceDB`.`InvoiceType` (`InvoiceTypeID`, `InvoiceTypeCode`, `InvoiceTypeDescription`, `Initiation`, `Events`, `Charges`) VALUES (207, 'Adhoc', NULL, 0, 1, 1);
INSERT INTO `ReferenceDB`.`InvoiceType` (`InvoiceTypeID`, `InvoiceTypeCode`, `InvoiceTypeDescription`, `Initiation`, `Events`, `Charges`) VALUES (208, 'CreditNote', NULL, 0, 0, 0);
INSERT INTO `ReferenceDB`.`InvoiceType` (`InvoiceTypeID`, `InvoiceTypeCode`, `InvoiceTypeDescription`, `Initiation`, `Events`, `Charges`) VALUES (209, 'PeriodicReleaseSuppressed', NULL, 0, 1, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `ChargingDB`.`ChargeHistoryType`
-- -----------------------------------------------------
START TRANSACTION;
USE `ChargingDB`;
INSERT INTO `ChargingDB`.`ChargeHistoryType` (`ChargeHistoryTypeID`, `ChargeHistoryTypeCode`, `ChargeHistoryTypeDescription`) VALUES (4001, 'NewNonRecurringCharge', NULL);
INSERT INTO `ChargingDB`.`ChargeHistoryType` (`ChargeHistoryTypeID`, `ChargeHistoryTypeCode`, `ChargeHistoryTypeDescription`) VALUES (4002, 'NewRecurringCharge', NULL);
INSERT INTO `ChargingDB`.`ChargeHistoryType` (`ChargeHistoryTypeID`, `ChargeHistoryTypeCode`, `ChargeHistoryTypeDescription`) VALUES (4003, 'OngoingRecurringCharge', NULL);
INSERT INTO `ChargingDB`.`ChargeHistoryType` (`ChargeHistoryTypeID`, `ChargeHistoryTypeCode`, `ChargeHistoryTypeDescription`) VALUES (4004, 'CallCharge', NULL);
INSERT INTO `ChargingDB`.`ChargeHistoryType` (`ChargeHistoryTypeID`, `ChargeHistoryTypeCode`, `ChargeHistoryTypeDescription`) VALUES (4005, 'NewOnStopCharge', NULL);
INSERT INTO `ChargingDB`.`ChargeHistoryType` (`ChargeHistoryTypeID`, `ChargeHistoryTypeCode`, `ChargeHistoryTypeDescription`) VALUES (4006, 'OnStopRecurringCharge', NULL);
INSERT INTO `ChargingDB`.`ChargeHistoryType` (`ChargeHistoryTypeID`, `ChargeHistoryTypeCode`, `ChargeHistoryTypeDescription`) VALUES (4007, 'RefundRecurringCharge', NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `ChargingDB`.`ProductChargeCategory`
-- -----------------------------------------------------
START TRANSACTION;
USE `ChargingDB`;
INSERT INTO `ChargingDB`.`ProductChargeCategory` (`ProductChargeCategoryID`, `ProductChargeCategoryCode`, `ProductChargeCategoryDescription`) VALUES (2001, 'RecurringCharges', NULL);
INSERT INTO `ChargingDB`.`ProductChargeCategory` (`ProductChargeCategoryID`, `ProductChargeCategoryCode`, `ProductChargeCategoryDescription`) VALUES (2002, 'NonRecurringCharges', NULL);
INSERT INTO `ChargingDB`.`ProductChargeCategory` (`ProductChargeCategoryID`, `ProductChargeCategoryCode`, `ProductChargeCategoryDescription`) VALUES (2003, 'CallCharges', NULL);
INSERT INTO `ChargingDB`.`ProductChargeCategory` (`ProductChargeCategoryID`, `ProductChargeCategoryCode`, `ProductChargeCategoryDescription`) VALUES (2004, 'Credits', NULL);
INSERT INTO `ChargingDB`.`ProductChargeCategory` (`ProductChargeCategoryID`, `ProductChargeCategoryCode`, `ProductChargeCategoryDescription`) VALUES (2005, 'Adjustments', NULL);
INSERT INTO `ChargingDB`.`ProductChargeCategory` (`ProductChargeCategoryID`, `ProductChargeCategoryCode`, `ProductChargeCategoryDescription`) VALUES (2006, 'Discounts', NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `ChargingDB`.`ProductChargeFrequency`
-- -----------------------------------------------------
START TRANSACTION;
USE `ChargingDB`;
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3001, 'OneOffs', 'Pay once when target >= start.');
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3002, 'MonthlyInArrears', 'Pay months up to start of target\'s month');
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3003, 'MonhtlyInAdvance', 'Pay months up to end of (target\'s month + 1)');
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3004, 'NextMonth', 'Pay months up to end of (target\'s month + 1)');
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3005, 'QuarterlyInAdvance', 'Pay quarters up to end of (target\'s quarter), customer\'s QuarterlyMonthOffset');
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3006, 'NextQuarter', 'Pay quarters up to end of (target\'s quarter + 3m), customer\'s QuarterlyMonthOffset');
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3007, 'YearlyInAdvance', 'Pay years up to end of Dec after target');
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3008, 'YearlyInAdvanceAnniversary', 'Pay years up to the next (start date) after target');
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3009, 'BiennialInAdvance', 'Pay halves up to the next end of June or Dec after target');
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3010, 'BiennialInAdvanceAnniversary', 'Pay halves up to the next (start date) or (start date + 6m) after target');

COMMIT;


-- -----------------------------------------------------
-- Data for table `ChargingDB`.`ProductChargingType`
-- -----------------------------------------------------
START TRANSACTION;
USE `ChargingDB`;
INSERT INTO `ChargingDB`.`ProductChargingType` (`ProductChargingTypeID`, `ProductChargingTypeCode`, `ProductChargingTypeDescription`, `Cost`, `Sell`) VALUES (1001, 'FixedCost-FixedSell', NULL, 1, 1);
INSERT INTO `ChargingDB`.`ProductChargingType` (`ProductChargingTypeID`, `ProductChargingTypeCode`, `ProductChargingTypeDescription`, `Cost`, `Sell`) VALUES (1002, 'FixedCost-VariableSell', NULL, 1, 2);
INSERT INTO `ChargingDB`.`ProductChargingType` (`ProductChargingTypeID`, `ProductChargingTypeCode`, `ProductChargingTypeDescription`, `Cost`, `Sell`) VALUES (1003, 'VariableCost-FixedSell', NULL, 2, 1);
INSERT INTO `ChargingDB`.`ProductChargingType` (`ProductChargingTypeID`, `ProductChargingTypeCode`, `ProductChargingTypeDescription`, `Cost`, `Sell`) VALUES (1004, 'VariableCost-VariableSell', NULL, 2, 2);
INSERT INTO `ChargingDB`.`ProductChargingType` (`ProductChargingTypeID`, `ProductChargingTypeCode`, `ProductChargingTypeDescription`, `Cost`, `Sell`) VALUES (1005, 'ZeroCost-FixedSell', NULL, 0, 1);
INSERT INTO `ChargingDB`.`ProductChargingType` (`ProductChargingTypeID`, `ProductChargingTypeCode`, `ProductChargingTypeDescription`, `Cost`, `Sell`) VALUES (1006, 'ZeroCost-VariableSell', NULL, 0, 2);

COMMIT;

-- -----------------------------------------------------
-- Data for table `RatingDB`.`TimePeriodMap`
-- -----------------------------------------------------
START TRANSACTION;
USE `RatingDB`;
INSERT INTO `RatingDB`.`TimePeriodMap` (`TimePeriodID`, `TimePeriodCode`, `TimePeriodDescription`, `TimePeriodStartDay`, `TimePeriodEndDay`, `TimePeriodStartTime`, `TimePeriodEndTime`) VALUES ('1', 'PEAK', 'Peak terrif time code', '1', '5', '08:00:00', '18:59:59');
INSERT INTO `RatingDB`.`TimePeriodMap` (`TimePeriodID`, `TimePeriodCode`, `TimePeriodDescription`, `TimePeriodStartDay`, `TimePeriodEndDay`, `TimePeriodStartTime`, `TimePeriodEndTime`) VALUES ('3', 'WEEKEND', 'Weekend Terrif Time code', '6', '7', '24:00:00', '23:59:59');
INSERT INTO `RatingDB`.`TimePeriodMap` (`TimePeriodID`, `TimePeriodCode`, `TimePeriodDescription`, `TimePeriodStartDay`, `TimePeriodEndDay`, `TimePeriodStartTime`, `TimePeriodEndTime`) VALUES ('2', 'OFF_PEAK', 'Off Peak terrif time code', '1', '5', '19:00:00', '07:59:59');

COMMIT;

