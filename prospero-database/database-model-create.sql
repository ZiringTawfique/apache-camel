-- MySQL Script generated by MySQL Workbench
-- 03/17/17 14:56:56
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema InvoiceDB
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema InvoiceDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `InvoiceDB` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
-- -----------------------------------------------------
-- Schema ReferenceDB
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema ReferenceDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ReferenceDB` ;
-- -----------------------------------------------------
-- Schema ChargingDB
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema ChargingDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ChargingDB` ;
-- -----------------------------------------------------
-- Schema AllSpark
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema AllSpark
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `AllSpark` ;
-- -----------------------------------------------------
-- Schema EventsDB
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema EventsDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `EventsDB` ;
-- -----------------------------------------------------
-- Schema RatingDB
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema RatingDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `RatingDB` ;
USE `InvoiceDB` ;

-- -----------------------------------------------------
-- Table `InvoiceDB`.`InvoiceBatchSummary`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `InvoiceDB`.`InvoiceBatchSummary` (
  `InvoiceBatchNumber` BIGINT NOT NULL AUTO_INCREMENT,
  `InvoiceBatchDescription` VARCHAR(25) NOT NULL,
  `InvoiceGenerationDate` DATETIME NOT NULL,
  `InvoiceDisplayDate` DATE NOT NULL,
  `NumberOfAccountsSubmitted` INT NOT NULL,
  `NumberOfAccountsRejected` INT NOT NULL,
  `NumberOfAccountsAccepted` INT NOT NULL,
  `NumberOfAccountsNotDueAnInvoice` INT NOT NULL,
  `NumberOfAccountsSuppressed` INT NOT NULL,
  `NumberOfInvoicesGenerated` INT NOT NULL,
  `NumberOfInvoicesRolledBack` INT NOT NULL,
  `NumberOfInvoicesRegenerated` INT NOT NULL,
  `InvoiceBatchUser` VARCHAR(25) NOT NULL,
  PRIMARY KEY (`InvoiceBatchNumber`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `InvoiceDB`.`InvoiceSummary`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `InvoiceDB`.`InvoiceSummary` (
  `InvoiceNumber` VARCHAR(25) NOT NULL COMMENT 'Alternative:\n- InvoiceNumber INT\n- then, use max(InvoiceNumber)+1 BY AccountNumber\n- InvoiceNumberString AS CONCAT_WS(\'-\',AccountNumber,InvoiceNumber)\n- PK(AccountNumber, InvoiceNumber) \n- Free text for \"ACCT-0003-TEST1\"',
  `InvoicingCompanyID` SMALLINT NOT NULL,
  `InvoiceTypeID` SMALLINT NOT NULL,
  `BillTypeID` SMALLINT NOT NULL,
  `CustomerID` BIGINT NOT NULL,
  `AccountNumber` VARCHAR(15) NOT NULL,
  `InvoiceGenerationDate` DATETIME NOT NULL,
  `InvoiceDisplayDate` DATE NOT NULL,
  `InvoiceDueDate` DATE NOT NULL,
  `RolledBackFlag` TINYINT(1) NOT NULL,
  `InvoiceVersion` TINYINT NOT NULL,
  `InvoiceCurrency` VARCHAR(3) NOT NULL,
  `AccountPreviousBalance` DECIMAL(18,4) NOT NULL,
  `InvoiceVATableTotal` DECIMAL(18,4) NOT NULL,
  `InvoiceNet` DECIMAL(18,2) NOT NULL,
  `InvoiceVAT` DECIMAL(18,2) NOT NULL,
  `InvoiceTotal` DECIMAL(18,2) NOT NULL,
  `AddressID` BIGINT NOT NULL,
  `InvoicePaymentTypeID` SMALLINT NOT NULL,
  `InvoiceLayoutTypeID` SMALLINT NOT NULL,
  PRIMARY KEY (`InvoiceNumber`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `InvoiceDB`.`InvoiceLineItem`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `InvoiceDB`.`InvoiceLineItem` (
  `InvoiceLineItemID` BIGINT NOT NULL AUTO_INCREMENT,
  `InvoiceNumber` VARCHAR(25) NOT NULL,
  `CustomerID` BIGINT NOT NULL,
  `AccountNumber` VARCHAR(15) NOT NULL,
  `CustomerProductChargeID` BIGINT NULL COMMENT 'Not present for e.g. Call Charges.',
  `BillingReferenceID` BIGINT NOT NULL,
  `ProductID` BIGINT NOT NULL,
  `ChargeInstanceDescription` VARCHAR(75) NOT NULL,
  `ProductChargeCategoryID` SMALLINT NOT NULL,
  `ProductChargeFrequencyID` SMALLINT NOT NULL,
  `ChargeQuantity` INT NOT NULL,
  `UnitCostToGCI` DECIMAL(18,4) NOT NULL,
  `UnitChargeToCustomer` DECIMAL(18,4) NOT NULL,
  `ChargePeriodStartDate` DATE NOT NULL,
  `ChargePeriodEndDate` DATE NOT NULL,
  `TotalCostToGCI` DECIMAL(18,4) NOT NULL,
  `TotalChargeToCustomer` DECIMAL(18,4) NOT NULL,
  `TotalVATToCustomer` DECIMAL(18,4) NOT NULL,
  `ChargeTaxTypeFlag` SMALLINT NOT NULL,
  `ChargeHistoryTypeID` SMALLINT NOT NULL,
  `CustomerCustomReference` VARCHAR(75) NOT NULL,
  PRIMARY KEY (`InvoiceLineItemID`))
ENGINE = InnoDB;

USE `ReferenceDB` ;

-- -----------------------------------------------------
-- Table `ReferenceDB`.`InvoicingCompany`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ReferenceDB`.`InvoicingCompany` (
  `InvoicingCompanyID` SMALLINT NOT NULL,
  `InvoicingCompanyName` VARCHAR(75) NOT NULL,
  `InvoicingCompanyDisplayName` VARCHAR(75) NOT NULL,
  `InvoicingCompanyNumber` VARCHAR(25) NOT NULL,
  `InvoicingCompanyVATCode` VARCHAR(25) NOT NULL,
  `InvoicingCompanyStatusFlag` TINYINT(1) NOT NULL,
  `AddressID` BIGINT NOT NULL,
  `InvoicingCompanyPhoneNumber` VARCHAR(15) NOT NULL,
  `InvoicingCompanyEmailAddress` VARCHAR(30) NOT NULL,
  `InvoicingCompanyWebsite` VARCHAR(30) NOT NULL,
  `InvoicingCompanyLogoFile` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`InvoicingCompanyID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ReferenceDB`.`BillType`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ReferenceDB`.`BillType` (
  `BillTypeID` SMALLINT NOT NULL,
  `BillTypeCode` VARCHAR(40) NOT NULL,
  `BillTypeDescription` VARCHAR(200) NULL,
  PRIMARY KEY (`BillTypeID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ReferenceDB`.`PaymentType`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ReferenceDB`.`PaymentType` (
  `PaymentTypeID` SMALLINT NOT NULL,
  `PaymentTypeCode` VARCHAR(40) NOT NULL,
  `PaymentTypeDescription` VARCHAR(200) NULL,
  PRIMARY KEY (`PaymentTypeID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ReferenceDB`.`InvoiceLayoutType`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ReferenceDB`.`InvoiceLayoutType` (
  `InvoiceLayoutTypeID` SMALLINT NOT NULL,
  `InvoiceLayoutTypeCode` VARCHAR(40) NOT NULL,
  `InvoiceLayoutTypeDescription` VARCHAR(200) NOT NULL,
  PRIMARY KEY (`InvoiceLayoutTypeID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ReferenceDB`.`InvoiceType`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ReferenceDB`.`InvoiceType` (
  `InvoiceTypeID` SMALLINT NOT NULL,
  `InvoiceTypeCode` VARCHAR(40) NOT NULL,
  `InvoiceTypeDescription` VARCHAR(200) NULL,
  `Initiation` TINYINT(1) NOT NULL,
  `Events` TINYINT(1) NOT NULL,
  `Charges` TINYINT(1) NOT NULL,
  PRIMARY KEY (`InvoiceTypeID`))
ENGINE = InnoDB;

USE `ChargingDB` ;

-- -----------------------------------------------------
-- Table `ChargingDB`.`ProductChargingType`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ChargingDB`.`ProductChargingType` (
  `ProductChargingTypeID` SMALLINT NOT NULL,
  `ProductChargingTypeCode` VARCHAR(40) NOT NULL,
  `ProductChargingTypeDescription` VARCHAR(200) NULL,
  `Cost` TINYINT NOT NULL,
  `Sell` TINYINT NOT NULL,
  PRIMARY KEY (`ProductChargingTypeID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ChargingDB`.`ProductChargeCategory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ChargingDB`.`ProductChargeCategory` (
  `ProductChargeCategoryID` SMALLINT NOT NULL,
  `ProductChargeCategoryCode` VARCHAR(40) NOT NULL,
  `ProductChargeCategoryDescription` VARCHAR(200) NULL,
  PRIMARY KEY (`ProductChargeCategoryID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ChargingDB`.`ProductChargeFrequency`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ChargingDB`.`ProductChargeFrequency` (
  `ProductChargeFrequencyID` SMALLINT NOT NULL,
  `ProductChargeFrequencyCode` VARCHAR(40) NOT NULL,
  `ProductChargeFrequencyDescription` VARCHAR(200) NOT NULL,
  PRIMARY KEY (`ProductChargeFrequencyID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ChargingDB`.`ChargeHistoryType`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ChargingDB`.`ChargeHistoryType` (
  `ChargeHistoryTypeID` SMALLINT NOT NULL,
  `ChargeHistoryTypeCode` VARCHAR(40) NOT NULL,
  `ChargeHistoryTypeDescription` VARCHAR(200) NULL,
  PRIMARY KEY (`ChargeHistoryTypeID`))
ENGINE = InnoDB;

USE `AllSpark` ;

-- -----------------------------------------------------
-- Table `AllSpark`.`BillingReference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AllSpark`.`BillingReference` (
  `BillingReferenceID` BIGINT NOT NULL AUTO_INCREMENT,
  `CustomerID` BIGINT NOT NULL,
  `AccountNumber` VARCHAR(15) NOT NULL,
  `NodeID` BIGINT NOT NULL,
  `OrderNumber` VARCHAR(15) NOT NULL,
  `BillingReference` VARCHAR(25) NOT NULL,
  `BillingReferenceID` VARCHAR(75) NOT NULL,
  `BillingReferenceStartDate` DATE NOT NULL,
  `BillingReferenceEndDate` DATE NOT NULL,
  `SupplierContractStartDate` DATE NOT NULL,
  `SupplierContractEndDate` DATE NOT NULL,
  `CustomerContractStartDate` DATE NOT NULL,
  `CustomerContractEndDate` DATE NOT NULL,
  `BillingReferenceCreateDate` DATETIME NOT NULL,
  `BillingReferenceCreateUser` VARCHAR(25) NOT NULL,
  `CustomerCustomReference` VARCHAR(75) NULL,
  `CustomerSiteName` VARCHAR(75) NOT NULL,
  `InstallationPostCode` VARCHAR(10) NOT NULL,
  `CustomerCostCentre` VARCHAR(75) NOT NULL,
  `CustomerPONumber` VARCHAR(75) NOT NULL,
  `GCISalesManager` VARCHAR(75) NOT NULL,
  `SupplierReference_1` VARCHAR(50) NULL,
  `SupplierReference_2` VARCHAR(50) NULL,
  `SupplierReference_3` VARCHAR(50) NULL,
  `GCICustomField_1` VARCHAR(50) NULL,
  `GCICustomField_2` VARCHAR(50) NULL,
  `GCICustomField_3` VARCHAR(50) NULL,
  PRIMARY KEY (`BillingReferenceID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `AllSpark`.`CustomerProductCharge`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AllSpark`.`CustomerProductCharge` (
  `CustomerProductChargeID` BIGINT NOT NULL AUTO_INCREMENT,
  `CustomerID` BIGINT NOT NULL,
  `AccountNumber` VARCHAR(15) NOT NULL,
  `OrderNumber` VARCHAR(15) NOT NULL,
  `BillingReferenceID` BIGINT NOT NULL,
  `ProductID` BIGINT NOT NULL,
  `DefaultProductDescription` VARCHAR(75) NOT NULL,
  `ChargeInstanceDescription` VARCHAR(75) NULL,
  `ChargeQuantity` BIGINT NOT NULL,
  `ProductChargeFrequencyID` SMALLINT NOT NULL,
  `UnitCostToGCI` DECIMAL(18,4) NOT NULL,
  `UnitChargeToCustomer` DECIMAL(18,4) NOT NULL,
  `ChargeTaxTypeFlag` SMALLINT NOT NULL,
  `ChargeStartDate` DATE NOT NULL,
  `ChargeEndDate` DATE NULL COMMENT 'X = That day.\nNULL = Never ends.',
  `ChargeBilledUntil` DATE NULL COMMENT 'X = End of that day.\nNULL = Start of ChargeStartDate.\n(so e.g. Jan 1 - Jan 1 = \"paid for that day\", Jan 1 - NONE = \"not started yet\")',
  `SupplierContractStartDate` DATE NOT NULL,
  `SupplierContractEndDate` DATE NOT NULL,
  `CustomerContractStartDate` DATE NOT NULL,
  `CustomerContractEndDate` DATE NOT NULL,
  `AllowCreditBackFlag` TINYINT(1) NOT NULL,
  `CustomerCustomReference` VARCHAR(75) NULL,
  `ChargeInstanceCreateDate` DATETIME NOT NULL,
  `ChargeInstanceCreateUser` VARCHAR(25) NOT NULL,
  PRIMARY KEY (`CustomerProductChargeID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `AllSpark`.`Customer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AllSpark`.`Customer` (
  `CustomerID` BIGINT NOT NULL AUTO_INCREMENT,
  `AccountNumber` VARCHAR(15) NOT NULL,
  `Name` VARCHAR(60) NOT NULL,
  `AddressID` BIGINT NOT NULL,
  PRIMARY KEY (`CustomerID`),
  UNIQUE INDEX `AccountNumber_UNIQUE` (`AccountNumber` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `AllSpark`.`Address`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AllSpark`.`Address` (
  `AddressID` BIGINT NOT NULL AUTO_INCREMENT,
  `Line1` VARCHAR(60) NOT NULL,
  `Line2` VARCHAR(60) NULL,
  `Town` VARCHAR(60) NULL,
  `County` VARCHAR(60) NULL,
  `PostCode` VARCHAR(10) NOT NULL,
  `Country` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`AddressID`))
ENGINE = InnoDB;

USE `EventsDB` ;

-- -----------------------------------------------------
-- Table `EventsDB`.`RatedEvents`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `EventsDB`.`RatedEvents` (
  `RatedEventID` BIGINT NOT NULL AUTO_INCREMENT,
  `RatedEventCreateDate` DATETIME NOT NULL,
  `CustomerID` BIGINT NOT NULL,
  `AccountNumber` VARCHAR(15) NOT NULL,
  `BillingReferenceID` BIGINT NOT NULL,
  `BilledInvoiceLineItemID` BIGINT NULL COMMENT 'Null if not yet billed.\nIf an invoice gets rolled back, which events it had is ambiguous. Would EventLineItems be better?',
  `BilledInvoiceID` BIGINT NULL,
  `BilledInvoiceBatchID` BIGINT NULL,
  `CallBand` VARCHAR(45) NOT NULL,
  `CostToCustomer` DECIMAL(18,4) NOT NULL,
  `CostToGCI` DECIMAL(18,4) NOT NULL,
  `VATable` TINYINT(1) NOT NULL,
  `VATToCustomer` DECIMAL(18,4) NOT NULL,
  `BillingCLI` VARCHAR(50) NOT NULL,
  `OriginatingCLI` VARCHAR(50) NOT NULL,
  `TerminatingCLI` VARCHAR(50) NOT NULL,
  `EventTime` DATETIME NOT NULL,
  `UsedPPC` DECIMAL(18,4) NOT NULL,
  `UsedPPM` DECIMAL(18,4) NOT NULL,
  `UsedCallBand` VARCHAR(45) NOT NULL COMMENT 'ID?',
  `Duration` INT NOT NULL COMMENT 'Seconds.',
  PRIMARY KEY (`RatedEventID`))
ENGINE = InnoDB;

USE `RatingDB` ;

-- -----------------------------------------------------
-- Table `RatingDB`.`NumberRangeMap`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RatingDB`.`NumberRangeMap` (
  `NumberRangeMapID` BIGINT NOT NULL AUTO_INCREMENT,
  `NumberRange` BIGINT NOT NULL,
  `NumberRangeSource` SMALLINT NOT NULL COMMENT 'Where these numbers came from e.g. NonGeo, 118, National (or, this is a view combining those source tables)',
  `NumberRangeClassification` VARCHAR(80) NOT NULL COMMENT 'Charge band, pn4',
  `NumberRangeType` VARCHAR(30) NOT NULL COMMENT 'GCI_Bespoke, etc',
  `NumberRangeStartDate` DATE NOT NULL,
  `NumberRangeEndDate` DATE NOT NULL,
  PRIMARY KEY (`NumberRangeMapID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `RatingDB`.`Supplier`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RatingDB`.`Supplier` (
  `SupplierID` BIGINT NOT NULL AUTO_INCREMENT,
  `SupplierName` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`SupplierID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `RatingDB`.`EventFile`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RatingDB`.`EventFile` (
  `EventFileID` BIGINT NOT NULL AUTO_INCREMENT,
  `SupplierID` BIGINT NOT NULL,
  `ImportRunNumber` INT NOT NULL,
  `EventFileName` VARCHAR(90) NOT NULL,
  `EventFileChecksum` CHAR(32) NOT NULL COMMENT 'MD5?',
  `DateProcessed` DATETIME NOT NULL,
  `LinesInFile` INT NOT NULL,
  `RecordsInFile` INT NOT NULL,
  `EventRecordCount` INT NOT NULL,
  `SuccessRecordCount` INT NOT NULL,
  `KilledRecordCount` INT NOT NULL,
  `ErrorRecordCount` INT NOT NULL,
  `ErrorRunsCount` INT NOT NULL,
  PRIMARY KEY (`EventFileID`))
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `ReferenceDB`.`BillType`
-- -----------------------------------------------------
START TRANSACTION;
USE `ReferenceDB`;
INSERT INTO `ReferenceDB`.`BillType` (`BillTypeID`, `BillTypeCode`, `BillTypeDescription`) VALUES (301, 'Default', NULL);
INSERT INTO `ReferenceDB`.`BillType` (`BillTypeID`, `BillTypeCode`, `BillTypeDescription`) VALUES (302, 'DRC', NULL);
INSERT INTO `ReferenceDB`.`BillType` (`BillTypeID`, `BillTypeCode`, `BillTypeDescription`) VALUES (303, 'SelfBill', NULL);
INSERT INTO `ReferenceDB`.`BillType` (`BillTypeID`, `BillTypeCode`, `BillTypeDescription`) VALUES (304, 'Statement', NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `ReferenceDB`.`PaymentType`
-- -----------------------------------------------------
START TRANSACTION;
USE `ReferenceDB`;
INSERT INTO `ReferenceDB`.`PaymentType` (`PaymentTypeID`, `PaymentTypeCode`, `PaymentTypeDescription`) VALUES (401, 'DirectDebit', NULL);
INSERT INTO `ReferenceDB`.`PaymentType` (`PaymentTypeID`, `PaymentTypeCode`, `PaymentTypeDescription`) VALUES (402, 'Cheque', NULL);
INSERT INTO `ReferenceDB`.`PaymentType` (`PaymentTypeID`, `PaymentTypeCode`, `PaymentTypeDescription`) VALUES (403, 'StandingOrder', NULL);
INSERT INTO `ReferenceDB`.`PaymentType` (`PaymentTypeID`, `PaymentTypeCode`, `PaymentTypeDescription`) VALUES (404, 'CreditCard', NULL);
INSERT INTO `ReferenceDB`.`PaymentType` (`PaymentTypeID`, `PaymentTypeCode`, `PaymentTypeDescription`) VALUES (405, 'BACS', NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `ReferenceDB`.`InvoiceType`
-- -----------------------------------------------------
START TRANSACTION;
USE `ReferenceDB`;
INSERT INTO `ReferenceDB`.`InvoiceType` (`InvoiceTypeID`, `InvoiceTypeCode`, `InvoiceTypeDescription`, `Initiation`, `Events`, `Charges`) VALUES (201, 'InitiationPeriodic', NULL, 1, 1, 1);
INSERT INTO `ReferenceDB`.`InvoiceType` (`InvoiceTypeID`, `InvoiceTypeCode`, `InvoiceTypeDescription`, `Initiation`, `Events`, `Charges`) VALUES (202, 'InitiationAdhocEventsOnly', NULL, 1, 1, 0);
INSERT INTO `ReferenceDB`.`InvoiceType` (`InvoiceTypeID`, `InvoiceTypeCode`, `InvoiceTypeDescription`, `Initiation`, `Events`, `Charges`) VALUES (203, 'InitiationAdhocChargesOnly', NULL, 1, 0, 1);
INSERT INTO `ReferenceDB`.`InvoiceType` (`InvoiceTypeID`, `InvoiceTypeCode`, `InvoiceTypeDescription`, `Initiation`, `Events`, `Charges`) VALUES (204, 'Periodic', NULL, 0, 1, 1);
INSERT INTO `ReferenceDB`.`InvoiceType` (`InvoiceTypeID`, `InvoiceTypeCode`, `InvoiceTypeDescription`, `Initiation`, `Events`, `Charges`) VALUES (205, 'AdhocEventsOnly', NULL, 0, 1, 0);
INSERT INTO `ReferenceDB`.`InvoiceType` (`InvoiceTypeID`, `InvoiceTypeCode`, `InvoiceTypeDescription`, `Initiation`, `Events`, `Charges`) VALUES (206, 'AdhocChargesOnly', NULL, 0, 0, 1);
INSERT INTO `ReferenceDB`.`InvoiceType` (`InvoiceTypeID`, `InvoiceTypeCode`, `InvoiceTypeDescription`, `Initiation`, `Events`, `Charges`) VALUES (207, 'Adhoc', NULL, 0, 1, 1);
INSERT INTO `ReferenceDB`.`InvoiceType` (`InvoiceTypeID`, `InvoiceTypeCode`, `InvoiceTypeDescription`, `Initiation`, `Events`, `Charges`) VALUES (208, 'CreditNote', NULL, 0, 0, 0);
INSERT INTO `ReferenceDB`.`InvoiceType` (`InvoiceTypeID`, `InvoiceTypeCode`, `InvoiceTypeDescription`, `Initiation`, `Events`, `Charges`) VALUES (209, 'PeriodicReleaseSuppressed', NULL, 0, 1, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `ChargingDB`.`ProductChargingType`
-- -----------------------------------------------------
START TRANSACTION;
USE `ChargingDB`;
INSERT INTO `ChargingDB`.`ProductChargingType` (`ProductChargingTypeID`, `ProductChargingTypeCode`, `ProductChargingTypeDescription`, `Cost`, `Sell`) VALUES (1001, 'FixedCost-FixedSell', NULL, 1, 1);
INSERT INTO `ChargingDB`.`ProductChargingType` (`ProductChargingTypeID`, `ProductChargingTypeCode`, `ProductChargingTypeDescription`, `Cost`, `Sell`) VALUES (1002, 'FixedCost-VariableSell', NULL, 1, 2);
INSERT INTO `ChargingDB`.`ProductChargingType` (`ProductChargingTypeID`, `ProductChargingTypeCode`, `ProductChargingTypeDescription`, `Cost`, `Sell`) VALUES (1003, 'VariableCost-FixedSell', NULL, 2, 1);
INSERT INTO `ChargingDB`.`ProductChargingType` (`ProductChargingTypeID`, `ProductChargingTypeCode`, `ProductChargingTypeDescription`, `Cost`, `Sell`) VALUES (1004, 'VariableCost-VariableSell', NULL, 2, 2);
INSERT INTO `ChargingDB`.`ProductChargingType` (`ProductChargingTypeID`, `ProductChargingTypeCode`, `ProductChargingTypeDescription`, `Cost`, `Sell`) VALUES (1005, 'ZeroCost-FixedSell', NULL, 0, 1);
INSERT INTO `ChargingDB`.`ProductChargingType` (`ProductChargingTypeID`, `ProductChargingTypeCode`, `ProductChargingTypeDescription`, `Cost`, `Sell`) VALUES (1006, 'ZeroCost-VariableSell', NULL, 0, 2);

COMMIT;


-- -----------------------------------------------------
-- Data for table `ChargingDB`.`ProductChargeCategory`
-- -----------------------------------------------------
START TRANSACTION;
USE `ChargingDB`;
INSERT INTO `ChargingDB`.`ProductChargeCategory` (`ProductChargeCategoryID`, `ProductChargeCategoryCode`, `ProductChargeCategoryDescription`) VALUES (2001, 'RecurringCharges', NULL);
INSERT INTO `ChargingDB`.`ProductChargeCategory` (`ProductChargeCategoryID`, `ProductChargeCategoryCode`, `ProductChargeCategoryDescription`) VALUES (2002, 'NonRecurringCharges', NULL);
INSERT INTO `ChargingDB`.`ProductChargeCategory` (`ProductChargeCategoryID`, `ProductChargeCategoryCode`, `ProductChargeCategoryDescription`) VALUES (2003, 'CallCharges', NULL);
INSERT INTO `ChargingDB`.`ProductChargeCategory` (`ProductChargeCategoryID`, `ProductChargeCategoryCode`, `ProductChargeCategoryDescription`) VALUES (2004, 'Credits', NULL);
INSERT INTO `ChargingDB`.`ProductChargeCategory` (`ProductChargeCategoryID`, `ProductChargeCategoryCode`, `ProductChargeCategoryDescription`) VALUES (2005, 'Adjustments', NULL);
INSERT INTO `ChargingDB`.`ProductChargeCategory` (`ProductChargeCategoryID`, `ProductChargeCategoryCode`, `ProductChargeCategoryDescription`) VALUES (2006, 'Discounts', NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `ChargingDB`.`ProductChargeFrequency`
-- -----------------------------------------------------
START TRANSACTION;
USE `ChargingDB`;
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3001, 'OneOffs', 'Pay once when target >= start.');
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3002, 'MonthlyInArrears', 'Pay months up to start of target\'s month');
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3003, 'MonhtlyInAdvance', 'Pay months up to end of (target\'s month + 1)');
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3004, 'NextMonth', 'Pay months up to end of (target\'s month + 1)');
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3005, 'QuarterlyInAdvance', 'Pay quarters up to end of (target\'s quarter), customer\'s QuarterlyMonthOffset');
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3006, 'NextQuarter', 'Pay quarters up to end of (target\'s quarter + 3m), customer\'s QuarterlyMonthOffset');
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3007, 'YearlyInAdvance', 'Pay years up to end of Dec after target');
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3008, 'YearlyInAdvanceAnniversary', 'Pay years up to the next (start date) after target');
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3009, 'BiennialInAdvance', 'Pay halves up to the next end of June or Dec after target');
INSERT INTO `ChargingDB`.`ProductChargeFrequency` (`ProductChargeFrequencyID`, `ProductChargeFrequencyCode`, `ProductChargeFrequencyDescription`) VALUES (3010, 'BiennialInAdvanceAnniversary', 'Pay halves up to the next (start date) or (start date + 6m) after target');

COMMIT;


-- -----------------------------------------------------
-- Data for table `ChargingDB`.`ChargeHistoryType`
-- -----------------------------------------------------
START TRANSACTION;
USE `ChargingDB`;
INSERT INTO `ChargingDB`.`ChargeHistoryType` (`ChargeHistoryTypeID`, `ChargeHistoryTypeCode`, `ChargeHistoryTypeDescription`) VALUES (4001, 'NewNonRecurringCharge', NULL);
INSERT INTO `ChargingDB`.`ChargeHistoryType` (`ChargeHistoryTypeID`, `ChargeHistoryTypeCode`, `ChargeHistoryTypeDescription`) VALUES (4002, 'NewRecurringCharge', NULL);
INSERT INTO `ChargingDB`.`ChargeHistoryType` (`ChargeHistoryTypeID`, `ChargeHistoryTypeCode`, `ChargeHistoryTypeDescription`) VALUES (4003, 'OngoingRecurringCharge', NULL);
INSERT INTO `ChargingDB`.`ChargeHistoryType` (`ChargeHistoryTypeID`, `ChargeHistoryTypeCode`, `ChargeHistoryTypeDescription`) VALUES (4004, 'CallCharge', NULL);
INSERT INTO `ChargingDB`.`ChargeHistoryType` (`ChargeHistoryTypeID`, `ChargeHistoryTypeCode`, `ChargeHistoryTypeDescription`) VALUES (4005, 'NewOnStopCharge', NULL);
INSERT INTO `ChargingDB`.`ChargeHistoryType` (`ChargeHistoryTypeID`, `ChargeHistoryTypeCode`, `ChargeHistoryTypeDescription`) VALUES (4006, 'OnStopRecurringCharge', NULL);
INSERT INTO `ChargingDB`.`ChargeHistoryType` (`ChargeHistoryTypeID`, `ChargeHistoryTypeCode`, `ChargeHistoryTypeDescription`) VALUES (4007, 'RefundRecurringCharge', NULL);

COMMIT;

